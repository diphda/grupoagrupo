<?php

/**
 * Provider
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    grupos_consumo
 * @subpackage model
 * @author     info@diphda.net
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Provider extends BaseProvider
{

    public function getClass()
    {
        return "Provider";
    }


    public function hasProducts()
    {
        if (count($this->Product))
        {
            return true;
        }
         
        return false;
    }


    public function getQueryBasket()
    {
        return $query=Doctrine::getTable("ProviderProduct")->createQuery()
        ->where("provider_id=?",$this->id)
        ->andWhere("provider_product_type_id=?",2);
    }

    public function getBasket()
    {
        return $this->getQueryBasket()->execute();
    }


    public function hasBasket()
    {

        if (count($this->getQueryBasket()))
        {
            return true;
        }
         
        return false;
    }


    public function hasProviderImages()
    {
        if (count($this->ProviderImage))
        {
            return true;
        }
         
        return false;
    }

    public function getCityDistance($city)
    {
        /*
         * Esto lo he sacado de aquí, es la fórmula de Haversine para el cálculo de distancias.
        * http://www.tufuncion.com/distancia-coordenadas
        */

        $latitudeAbs=deg2rad($this->City->latitude-$city->latitude);
        $longitudeAbs=deg2rad($this->City->longitude-$city->longitude);
        $alfa=pow(sin($latitudeAbs/2),2)+cos(deg2rad($this->City->latitude))*cos(deg2rad($city->latitude))*pow(sin($longitudeAbs/2),2);
        $c=2*atan2(sqrt($alfa),sqrt(1-$alfa));
        return $distance=6378*$c;
    }

    public function isAceptedInGroup($group_id)
    {
        $query=Doctrine::getTable("AceptedProviderConsumerGroup")->createQuery()
        ->where("consumer_group_id=?",$group_id)
        ->andWhere("provider_id=?",$this->id)
        ->andWhere("acepted_provider_state_id=?",1);

        if ($query->count())
        {
            return true;
        }

        return false;
    }

    /*
     * fue aceptado pero está rechazado en este momento
    */
    public function wasAceptedInGroup($group_id)
    {
        $query=Doctrine::getTable("AceptedProviderConsumerGroup")->createQuery()
        ->where("consumer_group_id=?",$group_id)
        ->andWhere("provider_id=?",$this->id)
        ->andWhere("acepted_provider_state_id=?",2);

        if ($query->count())
        {
            return true;
        }

        return false;
    }

    /*
     * pendiente de aceptación
    */
    public function pendingAceptedInGroup($group_id)
    {
        $query=Doctrine::getTable("AceptedProviderConsumerGroup")->createQuery()
        ->where("consumer_group_id=?",$group_id)
        ->andWhere("provider_id=?",$this->id)
        ->andWhere("acepted_provider_state_id=?",3);

        if ($query->count())
        {
            return true;
        }

        return false;
    }

    /*
     * indica cuándo se puede abrir un pedido para este proveedor y grupo
     * si un grupo tiene una orden en los estados 1 a 9 y 13, no puede abrir de nuevo.
     */
    public function hasOpenOrder($group_id)
    {
        $query=Doctrine::getTable("Orders")->createQuery()
        ->where("provider_id=?",$this->id)
        ->andWhere("consumer_group_id=?",$group_id)
        ->andWhereIn("order_state_id",array(1,2,3,4,5,6,7,8,13))
        ->andWhere("date_in <=?",date("Y-m-d"))
        ->andWhere("date_out >=?",date("Y-m-d"))
        ;

        if ($query->count())
        {
            return true;
        }

        return false;
    }

    /*
     * @return  AceptedProviderConsumerGroup object
    */

    public function getAceptedInGroup($group_id)
    {
        return $query=Doctrine::getTable("AceptedProviderConsumerGroup")->createQuery()
        ->where("consumer_group_id=?",$group_id)
        ->andWhere("provider_id=?",$this->id)
        ->andWhere("acepted_provider_state_id=?",1)->fetchOne();

    }

    public function getCatalogue()
    {
        return $query=Doctrine::getTable("ProviderProduct")->createQuery()->where("provider_id=?",$this->id)->execute();
    }

    /*
     * devuelve el listado de pedidos según el estado
    */
    public function getOrderState($state_id)
    {
        return  $query=Doctrine::getTable("Orders")->createQuery("a")
        ->where("order_state_id=?",$state_id)
        ->andWhere("provider_id=?",$this->id)
        ->execute();
    }

    /*
     * devuelve verdadero o falso según exista o no algún pedido en e
    * estado definido
    */

    public function hasOrderState($state_id)
    {
        $query=Doctrine::getTable("Orders")->createQuery("a")
        ->where("order_state_id=?",$state_id)
        ->andWhere("provider_id=?",$this->id);

        if ($query->count())
        {
            return true;
        }

        return false;
    }


    /*
     * devuelve verdadero o falso si hay algún pedido en cualquier estado
    */

    public function hasOrders()
    {
        $query=Doctrine::getTable("Orders")->createQuery("a")
        ->andWhere("provider_id=?",$this->id);

        if ($query->count())
        {
            return true;
        }

        return false;
    }
    /*
     * devuelve verdadero o falso si hay algún consumidor que ha hecho un pedido, en cualquier estado
    */

    public function hasConsumerOrders()
    {
        $query=Doctrine::getTable("ConsumerOrder")->createQuery("a")
        ->andWhere("provider_id=?",$this->id);

        if ($query->count())
        {
            return true;
        }

        return false;
    }

    /*
     * esta función es para las tabs de la lista de pedidos del productor
    * lo que hace es devolver el orden del estado que tiene el usuario como atributo 'last_state'
    * dentro del listado de pedidos que tiene. Es decir, busca en los pedidos los estados que tiene
    * y según el estado que está en last_state, devuelve su orden, empezando en 0
    */

    public function getTabOrderState()
    {
        $query=Doctrine::getTable("Orders")->createQuery()->groupBy("order_state_id")->orderBy("order_state_id")->execute();
        $states=array();
        if ($query->count())
        {
            foreach($query as $order)
            {
                $states[]=$order->order_state_id;
            }

            $position=array_search(sfContext::getInstance()->getUser()->getAttribute("last_state"),$states);
            if ($position)
            {
                return $position;
            }

        }

        return 0;
    }

    public function getHighlightProducts($limit=null)
    {
        return $query=Doctrine::getTable("ProviderProduct")
        ->createQuery()
        ->where("provider_id=?",$this->id)
        ->andWhere("is_highlight=?",1)
        ->andWhere("is_active=?",1)
        ->orderBy("highlight_date desc")
        ->limit($limit)
        ->execute();
    }

    public function hasHighlight()
    {
        $query=Doctrine::getTable("ProviderProduct")
        ->createQuery()
        ->where("provider_id=?",$this->id)
        ->andWhere("is_highlight=?",1)
        ->orderBy("highlight_date desc");


        if ($query->count())
        {
            return true;
        }

        return false;
    }

    public function getFullName()
    {
        return $this->name." ".$this->contact;
    }

    /*
     * devuelve el número de pedidos en trámite, es decir, que no han finalizado, de estado menor que 9
    */
    public function getPendingOrders()
    {
        $query=Doctrine::getTable("Orders")->createQuery()->where("provider_id=?",$this->id)
        ->andWhere("order_state_id<9 or order_state_id=13");

        return $query->count();
    }

    /*
     * devuelve un array con todos los consumidores que han pedido a un productor y que
    * el pedido no ha sido finalizado
    * sirve para avisar cuándo se elimina el productor
    */
    public function getConsumerInPendingOrders()
    {
        $query=Doctrine::getTable("Orders")->createQuery()->where("provider_id=?",$this->id)
        ->andWhere("order_state_id<9 or order_state_id=13")->execute();
        $orders_ids=array();
        foreach ($query as $order)
        {
            $orders_ids[]=$order->id;
        }

        $consumer_orders=Doctrine::getTable("ConsumerOrder")->createQuery()->whereIn("order_id",$orders_ids)->groupBy("consumer_id")->execute();

        $array_consumers=array();

        foreach($consumer_orders as $consumer_order)
        {
            $array_consumers[]=$consumer_order->Consumer;
        }

        return $array_consumers;
    }

    /*
     * Elimina los pedidos pendientes y lo quita de los grupos que lo habían aceptado.
    */
    public function deletePendingOrders()
    {
        $query=Doctrine::getTable("Orders")->createQuery()->where("provider_id=?",$this->id)
        ->andWhere("order_state_id<9 or order_state_id=13")->execute();
        foreach($query as $order)
        {
            $order->delete();
        }

        $accepted_query=Doctrine::getTable("AceptedProviderConsumerGroup")->createQuery()->where("provider_id=?",$this->id)->execute();
        foreach($accepted_query as $accept)
        {
            $accept->delete();
        }
    }

    public function getOrdersProduct($product_id)
    {
        $query=Doctrine::getTable("ConsumerOrder")->createQuery("l")
        ->leftJoin("l.Orders o")
        ->where("o.order_state_id<9")
        ->andWhere("l.product_id=".$product_id)
        ->andWhere("l.provider_id=".$this->id);

        return $query->count();
    }

    public function getActiveAnnouncements()
    {
        $query=Doctrine::getTable("Announcement")
        ->createQuery()
        ->where("user_id=?",$this->getUserId())
        ->andWhere("published=?",1);

        if ($query->count())
        {
            return $query->execute();
        }

        else return false;

    }

    public function getActiveEvents()
    {
        $query=Doctrine::getTable("Event")
        ->createQuery()
        ->where("user_id=?",$this->getUserId())
        ->andWhere("published=?",1)
        ->andWhere("(end_date is not null and end_date>=?) or (end_date is null and start_date>=?)",array(date("Y-m-d"),date("Y-m-d")));

        if ($query->count())
        {
            return $query->execute();
        }

        else return false;

    }

    public function getActiveFile()
    {
        $query=Doctrine::getTable("File")
        ->createQuery()
        ->where("user_id=?",$this->getUserId())
        ->andWhere("published=?",1);

        if ($query->count())
        {
            return $query->execute();
        }

        else return false;

    }

    public function getLastActiveFile()
    {
        return $query=Doctrine::getTable("File")
        ->createQuery()
        ->where("user_id=?",$this->getUserId())
        ->andWhere("published=?",1)
        ->orderBy("id desc")
        ->limit(1)
        ->fetchOne();
    }

    public function getLastActiveAnnouncement()
    {
        return $query=Doctrine::getTable("Announcement")
        ->createQuery()
        ->where("user_id=?",$this->getUserId())
        ->andWhere("published=?",1)
        ->orderBy("id desc")
        ->limit(1)
        ->fetchOne();
    }


    public function getLastActiveEvent()
    {
        return $query=Doctrine::getTable("Event")
        ->createQuery()
        ->where("user_id=?",$this->getUserId())
        ->andWhere("published=?",1)
        ->andWhere("(end_date is not null and end_date>=?) or (end_date is null and start_date>=?)",array(date("Y-m-d"),date("Y-m-d")))
        ->orderBy("id desc")
        ->limit(1)
        ->fetchOne();
    }


    /*
     * comprueba si ha definido el catálogo
    * si hay productos en el catálogo y no están activos, se supone que no hay catálogo
    */
    public function hasCatalogue()
    {
        $query=Doctrine::getTable("ProviderProduct")->createQuery()->where("provider_id=?",$this->id)->andWhere("is_active=?",1);

        if ($query->count())
        {
            return true;
        }

        return false;
    }

    /**
     *
     * @param unknown_type $limit
     * @param unknown_type $order
     * @return Doctrine_Collection Basket
     */
    public function getBasketOrderLimit($limit=null, $order="desc")
    {
        $query=Doctrine::getTable("ProviderProduct")->createQuery()->where("provider_id=?",$this->id)->andWhere("provider_product_type_id=?",2);
        if ($limit)
        {
            $query->limit($limit);
        }

        if ($order)
        {
            $query->orderBy("created_at $order");
        }

        return $query->execute();
    }

    public function hasProfileImage()
    {
        if($this->image)
        {
            return true;
        }

        return false;
    }
    
    public function getDateCreatedAt()
    {
      $date=strtotime($this->getCreatedAt());
      
      return date("Y-m-d",$date);
    }
}


