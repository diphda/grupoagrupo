<?php

/**
 * Consumer
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    grupos_consumo
 * @subpackage model
 * @author     info@diphda.net
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Consumer extends BaseConsumer
{
  public function getClass()
  {
    return "Consumer";
  }
  /*
   * Comprueba que la distancia entre la ciudad del consumidor y la ciudad
  * que se le pasa a la función es menor que el atributo $distance del consumidor
  */
  public function isNear($city)
  {
    $real_distance=$this->getCityDistance($city);
    if ($this->distance>=$real_distance)
    {
      return true;
    }
     
    return false;
  }

  /*
   * @param $city es un objeto de la clase City
  */
  public function getCityDistance($city)
  {
    /*
     * Esto lo he sacado de aquí, es la fórmula de Haversine para el cálculo de distancias.
    * http://www.tufuncion.com/distancia-coordenadas
    */

    $latitudeAbs=deg2rad($this->City->latitude-$city->latitude);
    $longitudeAbs=deg2rad($this->City->longitude-$city->longitude);
    $alfa=pow(sin($latitudeAbs/2),2)+cos(deg2rad($this->City->latitude))*cos(deg2rad($city->latitude))*pow(sin($longitudeAbs/2),2);
    $c=2*atan2(sqrt($alfa),sqrt(1-$alfa));
    return $distance=6378*$c;
  }



  public function isConsumerTrust()
  {
    if ($this->ConsumerGroup->consumer_trust_id==$this->id)
    {

      return true;
    }

    return false;
  }

  /*
   * Pertenece a un grupo de consumo?
  */
  public function belongConsumerGroup()
  {
    if ($this->consumer_state_id==2)
    {
      return true;
    }

    return false;
  }


  /*
   * el consumidor pertenece a mi grupo de consumo?
  * @param $consumer El consumidor que miro si es de mi grupo
  *
  */
  public function belongMyConsumerGroup($consumer)
  {
    if ($this->consumer_state_id==2 && $this->consumer_group_id=$consumer->consumer_group_id)
    {
      return true;
    }

    return false;
  }



  public function canBuyProduct($provider_id)
  {
    if ($this->consumer_state_id==2)
    {
      if ($this->getProviderOpenOrder($provider_id))
      {
        return true;
      }
    }

    return false;
  }



  /*
   * comprueba si ha iniciado el pedido. Sirve para poner o no poner el dinero que lleva gastado
  */
  public function hasStartOrder($order_id)
  {
    $query=Doctrine::getTable("ConsumerOrder")->createQuery()
    ->where("order_id=?",$order_id)
    ->andWhere("consumer_id=?",$this->id)
    ->andWhere("consumer_order_state_id=?",1)
    ;

    if ($query->count())
    {
      return true;
    }

    return false;
  }

  /*
   * comprueba si ha comprado el producto para el pedido y productor determinados
  */
  public function hasBuyProduct($provider_product_id,$order_id)
  {
    $query=Doctrine::getTable("ConsumerOrder")->createQuery()
    ->where("order_id=?",$order_id)
    ->andWhere("consumer_id=?",$this->id)
    ->andWhere("provider_product_id=?",$provider_product_id)
    ->andWhere("consumer_order_state_id=?",1);

    if ($query->count())
    {
      return true;
    }

    return false;
  }

  /*
   * devuelve la orden de pedido del consumidor para el producto, proveedor y pedido dados, en estado 1
  */

  public function getBuyProduct($provider_product_id,$order_id)
  {
    $query=Doctrine::getTable("ConsumerOrder")->createQuery()
    ->where("order_id=?",$order_id)
    ->andWhere("consumer_id=?",$this->id)
    ->andWhere("provider_product_id=?",$provider_product_id)
    ->andWhere("consumer_order_state_id=?",1)
    ->execute();

    return $query[0];
  }

  /*
   * devuelve el precio final consumido por el Consumidor para una
  * determinada orden. Siempre con el estado 1
  */
  public function getTotalPriceOrder($order_id)
  {
    $query=Doctrine::getTable("ConsumerOrder")->createQuery()
    ->where("order_id=?",$order_id)
    ->andWhere("consumer_id=?",$this->id)
    ->andWhere("consumer_order_state_id=?",1)
    ->execute();

    $price=0;

    foreach ($query as $consumer_order)
    {
      /*$provider_product=Doctrine::getTable("ProviderProduct")->createQuery()
       ->where("provider_id=?",$consumer_order->provider_id)
      ->andWhere("product_id=?",$consumer_order->product_id)
      ->fetchOne();*/
      $price+=$consumer_order->amount*$consumer_order->ProviderProduct->price;
    }

    return $price;
  }



  /*
   * Devuelve un objeto
  */
  public function getProviderOpenOrder($provider_id)
  {
    if ($this->belongConsumerGroup()){
      $query=Doctrine::getTable("Orders")->createQuery()
      ->where("provider_id=?",$provider_id)
      ->andWhere("consumer_group_id=?",$this->consumer_group_id)
      //->andWhere("date_in <=?",date("Y-m-d"))
      //->andWhere("date_out >=?",date("Y-m-d"))
      ->andWhereIn("order_state_id",array(1,2,3,4,5,6,7,8,13))
      ->orderBy("created_at desc");
      return $query->fetchOne();
    }

    return false;
  }


  public function getProviderOrders($provider_id)
  {
    if ($this->belongConsumerGroup()){
      $query=Doctrine::getTable("Orders")->createQuery()
      ->where("provider_id=?",$provider_id)
      ->andWhere("consumer_group_id=?",$this->consumer_group_id)
      ->execute();

      return $query;
    }

    return false;
  }
  /*
   * devuelve el objeto
  */

  public function getProviderOpenOrderObject($provider_id)
  {
    $object=$this->getProviderOpenOrder($provider_id);

    return $object[0];
  }

  /*
   * tiene algún proveedor del que es responsable?
  */
  /*public function isProviderTrust()
   {
  $query=Doctrine::getTable("AceptedProviderConsumerGroup")->createQuery("a")
  ->where("provider_consumer_trust_id=?",$this->id)
  ->execute();

  if ($query->count())
  {
  return true;
  }

  return false;
  }*/

  /*
   * devuelve los proveedores del que es responsable
  */
  public function  getProviderTrust()
  {
    return  $query=Doctrine::getTable("Provider")->createQuery("l")
    ->leftJoin("l.AceptedProviderConsumerGroup s")
    ->where("provider_consumer_trust_id=?",$this->id)
    ->andWhere("acepted_provider_state_id=?",1)
    ->andWhere("provider_state_id=?",1)
    ->execute();
  }

  /*
   * tiene algún proveedor del que es responsable?
  */

  public function  isProviderTrust()
  {
    $query=Doctrine::getTable("Provider")->createQuery("l")
    ->leftJoin("l.AceptedProviderConsumerGroup s")
    ->where("provider_consumer_trust_id=?",$this->id)
    ->andWhere("acepted_provider_state_id=?",1)
    ->andWhere("provider_state_id=?",1);

    if ($query->count())
    {
      return true;
    }

    return false;
  }

  /*
   * es el responsable de este proveedor
  */

  public function  isProviderTrustProvider($provider_id)
  {
    $query=Doctrine::getTable("Provider")->createQuery("l")
    ->leftJoin("l.AceptedProviderConsumerGroup s")
    ->where("provider_consumer_trust_id=?",$this->id)
    ->andWhere("acepted_provider_state_id=?",1)
    ->andWhere("provider_state_id=?",1)
    ->andWhere("l.id=?",$provider_id);

    if ($query->count())
    {
      return true;
    }

    return false;
  }


  /*
   * tiene algún pedido del que es responsable?
  */
  public function isOrderTrust()
  {
    $query=Doctrine::getTable("Orders")->createQuery("a")
    ->where("consumer_id=?",$this->id)
    ->execute();

    if ($query->count())
    {
      return true;
    }

    return false;
  }

  /*
   * devuelve los pedidos del que es responsable según el estado
  */
  public function getOrderTrustState($state_id)
  {
    return  $query=Doctrine::getTable("Orders")->createQuery("a")
    ->where("consumer_id=?",$this->id)
    ->andWhere("order_state_id=?",$state_id)
    ->execute();
  }


  /*
   * tiene algún pedido del que es responsable según el estado
  */
  public function isOrderTrustState($state_id)
  {
    $query=Doctrine::getTable("Orders")->createQuery("a")
    ->where("consumer_id=?",$this->id)
    ->andWhere("order_state_id=?",$state_id)
    ->execute();

    if ($query->count())
    {
      return true;
    }

    return false;
  }

  /*
   * Esta función similar a la anterior pero sin tener en cuenta
  * el consumidor responsable, e indicando el grupo de consumo. Es para el responsable del grupo
  */
  public function isOrderState($state_id)
  {
    $query=Doctrine::getTable("Orders")->createQuery("a")
    ->where("order_state_id=?",$state_id)
    ->andWhere("consumer_group_id=?",$this->consumer_group_id)
    ->execute();

    if ($query->count())
    {
      return true;
    }

    return false;
  }

  /*
   * devuelve los pedidos del grupo según el estado. Es para el responsable del grupo
  */
  public function getOrderState($state_id)
  {
    return  $query=Doctrine::getTable("Orders")->createQuery("a")
    ->where("order_state_id=?",$state_id)
    ->andWhere("consumer_group_id=?",$this->consumer_group_id)
    ->execute();
  }

  /*
   * devuelve un array con los emails de los consumidores de un grupo de consumo
  *
  */
  public function getAllEmailsConsumers($consumer_group_id=null)
  {
    if ($consumer_group_id==null)
    {
      $consumer_group_id=$this->consumer_group_id;
    }

    $consumers=Doctrine::getTable("Consumer")->createQuery()->where("consumer_group_id=?",$consumer_group_id)->execute();
    $emails=array();
    foreach($consumers as $consumer)
    {
      $emails[]=$consumer->email;
    }

    return $emails;
  }

   
  /*
   * devuelve el pedido de un consumidor para una orden concreta
  * es decir, lo que ha pedido de cada producto para un pedido definido
  */
  public function getProductsOrders($order_id)
  {
    return $query=Doctrine::getTable("ConsumerOrder")
    ->createQuery()
    ->where("order_id=?",$order_id)
    ->andWhere("consumer_id=?",$this->id)
    ->andWhere("consumer_order_state_id=?",1)
    ->orderBy("provider_product_id")
    ->execute();
  }


  /*
   * Es el responsable de este pedido?
  */

  public function isOrderTrustOrder($order_id)
  {
    $query=Doctrine::getTable("Orders")->createQuery("a")
    ->where("consumer_id=?",$this->id)
    ->andWhere("id=?",$order_id)
    ->execute();

    if ($query->count())
    {
      return true;
    }

    return false;
  }
  /*
   * comprueba si el usuario puede gestionar el pedido correspondiente
  * ya sea porque es el responsable del grupo o el responsable del
  * pedido
  */

  public function canManageOrder($order_id)
  {
    if ($this->isConsumerTrust())
    {
      return true;
    }

    if ($this->isOrderTrustOrder($order_id))
    {
      return true;
    }

    return false;
  }

  public function getCompletedName()
  {
    return $this->name." ".$this->surname;
  }

  public function getFullName()
  {
    return $this->name." ".$this->surname;
  }
   
  /*
   * Elimina sus órdenes de pedido en pedidos pendientes.
  */
  public function deletePendingOrders()
  {
    $query=Doctrine::getTable("ConsumerOrder")->createQuery("l")
    ->leftJoin("l.Orders s")
    ->where("l.consumer_id=?",$this->consumer_id)
    ->andWhere("s.order_state_id<9")->execute();
    foreach($query as $consumer_order)
    {
      $consumer_order->delete();
    }
  }

  /*
   * devuelve los productores que a los que el consumidor ha hecho pedidos y estos
  * no han finalizado
  */
  public function getProvidersInPendingOrders()
  {
    $query=Doctrine::getTable("ConsumerOrder")->createQuery("l")
    ->leftJoin("l.Orders s")
    ->where("l.consumer_id=?",$this->id)
    ->andWhere("s.order_state_id<9")->execute();

    $providers=array();
    foreach($query as $consumer_order)
    {
      $providers[]=$consumer_order->Provider;
    }

    return $providers;
  }

  public function getPendingOrders()
  {
    $query=Doctrine::getTable("ConsumerOrder")->createQuery("l")
    ->leftJoin("l.Orders s")
    ->where("l.consumer_id=?",$this->id)
    ->andWhere("s.order_state_id<9")
    ->groupBy("l.order_id");

    return $query->count();
  }

  public function hasProfileImage()
  {
    if($this->image)
    {
      return true;
    }

    return false;
  }

  public function hasInvitationToConsumerGroup()
  {
    if (in_array($this->consumer_state_id,array(2,5)))
    {
      return false;
    }

    $query=Doctrine::getTable("ConsumerGroupInvitation")
    ->createQuery()
    ->where("email=?",$this->email)
    ->andWhere("invitation_status_id=?",1);

    if (!$query->count())
    {
      return false;
    }
    else
    {

      return true;
    }
  }

  public function getInvitationToConsumerGroup()
  {
    if ($this->hasInvitationToConsumerGroup())
    {
      return Doctrine::getTable("ConsumerGroupInvitation")
      ->createQuery()
      ->where("email=?",$this->email)
      ->andWhere("invitation_status_id=?",1)
      ->execute();
    }

    return false;
  }
}
